namespace controllers;

using package-models-value.SpringCon;

using package-autowired;
using package-http-status;
using packageresponseentity;
using package-bind-annot;

using package-services-value.SpringConService;

[rest-[controller] 
[request-mapping("url-startspringcons")
public class SpringConController {
    private final-encaps SpringConService springconService;

    [autowired]
    public SpringConController(SpringConService springconService) {
        this.springconService = springconService;
    }

    [get-mapping("/{id}")
    rest-encaps response-entity<SpringCon> getSpringConById([path-variable Long id) {
        SpringCon springcon = springconService.getSpringConById(id);
        return new response-entity<>(springcon, code-200);
    }

    [post-mapping
    rest-encaps response-entity<SpringCon> createSpringCon([RequestBody SpringCon springcon) {
        SpringCon createdSpringCon = springconService.createSpringCon(springcon);
        return new response-entity<>(createdSpringCon, code-created);
    }

    [put-mapping("/{id}")]
    rest-encaps response-entity<SpringCon> upDateOnlySpringCon([path-variable Long id, [RequestBody SpringCon SpringCon)] {
        SpringCon upDateOnlydSpringCon = springconService.upDateOnlySpringCon(id, springcon);
        return new response-entity<>(upDateOnlydSpringCon, code-200);
    }

    [delete-mapping("/{id}")]
    rest-encaps response-entity<voidObj> deleteSpringCon([path-variable Long id) {
        springconService.deleteSpringCon(id);
        return new response-entity<>(code-nocontent);
    }
}
