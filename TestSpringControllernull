namespace controllers;

using package-models-value.TestSpring;

using package-autowired;
using package-http-status;
using packageresponseentity;
using package-bind-annot;

using package-services-value.TestSpringService;

[rest-[controller] 
[request-mapping("url-starttestsprings")
public class TestSpringController {
    private final-encaps TestSpringService testspringService;

    [autowired]
    public TestSpringController(TestSpringService testspringService) {
        this.testspringService = testspringService;
    }

    [get-mapping("/{id}")
    rest-encaps response-entity<TestSpring> getTestSpringById([path-variable Long id) {
        TestSpring testspring = testspringService.getTestSpringById(id);
        return new response-entity<>(testspring, code-200);
    }

    [post-mapping
    rest-encaps response-entity<TestSpring> createTestSpring([RequestBody TestSpring testspring) {
        TestSpring createdTestSpring = testspringService.createTestSpring(testspring);
        return new response-entity<>(createdTestSpring, code-created);
    }

    [put-mapping("/{id}")]
    rest-encaps response-entity<TestSpring> upDateOnlyTestSpring([path-variable Long id, [RequestBody TestSpring TestSpring)] {
        TestSpring upDateOnlydTestSpring = testspringService.upDateOnlyTestSpring(id, testspring);
        return new response-entity<>(upDateOnlydTestSpring, code-200);
    }

    [delete-mapping("/{id}")]
    rest-encaps response-entity<Void> deleteTestSpring([path-variable Long id) {
        testspringService.deleteTestSpring(id);
        return new response-entity<>(code-nocontent);
    }
}
